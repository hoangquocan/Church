datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex", "extendedIndexes"]
  binaryTargets   = "native"
}

model User {
  id        Int        @id @default(autoincrement())
  name      String?
  email     String     @unique
  avatar    String?
  bio       String?
  userRoles UserRole[]
  group     Group?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
}

model UserRole {
  id     Int    @id @default(autoincrement())
  name   String
  user   User?  @relation(fields: [userId], references: [id])
  userId Int
}

model Member {
  id          Int          @id @default(autoincrement()) @db.UnsignedInt
  name        String
  birthDate   DateTime
  phoneNumber String       @db.VarChar(20)
  email       String
  address     String
  urlAvatar   String?
  group       Group?       @relation(fields: [groupId], references: [id])
  groupId     Int?         @db.UnsignedInt
  attendance  Attendance[]
  createdAt   DateTime     @default(now())

  @@fulltext([name])
}

model Group {
  id         Int        @id @default(autoincrement()) @db.UnsignedInt
  name       String     @unique(sort: Asc)
  members    Member[]
  leader     User       @relation(fields: [userId], references: [id])
  userId     Int        @unique
  reports    Report[]
  activities Activity[]
  createdAt  DateTime   @default(now())
}

model Activity {
  id            Int          @id @default(autoincrement()) @db.UnsignedInt
  name          String
  date          DateTime
  urlAttendance String?
  group         Group        @relation(fields: [groupId], references: [id])
  groupId       Int          @db.UnsignedInt()
  attendance    Attendance[]
  createdAt     DateTime     @default(now())

  @@fulltext([name])
}

model Attendance {
  id          Int      @id @default(autoincrement())
  activity    Activity @relation(fields: [activityId], references: [id])
  activityId  Int      @db.UnsignedInt
  member      Member   @relation(fields: [memberId], references: [id])
  memberId    Int      @db.UnsignedInt
  present     Boolean  @db.Bit(1)
  submittedBy String?
  createdAt   DateTime @default(now())
}

model Report {
  id               Int      @id @default(autoincrement())
  group            Group    @relation(fields: [groupId], references: [id])
  groupId          Int      @db.UnsignedInt()
  question         Question @relation(fields: [questionId], references: [id])
  questionId       Int
  time             String
  totalActivity    Int
  totalCompleted   Int
  percentCompleted Decimal
  totalPresent     Int
  totalAbsent      Int
  percentPresent   Decimal
  comment          String
  answerOne        String @db.Text
  answerTwo        String @db.Text
  answerThree      String @db.Text
  createdAt        DateTime @default(now())
}

model Question {
  id            Int      @id @default(autoincrement())
  time          DateTime @unique
  questionOne   String
  questionTwo   String
  questionThree String
  reports       Report[]
  createdAt     DateTime @default(now())
}

